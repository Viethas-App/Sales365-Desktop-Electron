{"version":3,"file":"default-src_app_sales_keyboard_keyboard_module_ts.js","mappings":"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","sources":["./src/app/sales/keyboard/keyboard.component.ts","./src/app/sales/keyboard/keyboard.component.html","./src/app/sales/keyboard/keyboard.directive.ts","./src/app/sales/keyboard/keyboard.module.ts","./src/app/sales/keyboard/specialKey.ts"],"sourcesContent":["import { ChangeDetectorRef, Component, ElementRef, HostListener, OnInit } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { SPECIAL_KEYS } from './specialKey';\r\n\r\n\r\n@Component({\r\n  selector: 'app-keyboard',\r\n  templateUrl: './keyboard.component.html',\r\n  styleUrls: ['./keyboard.component.scss']\r\n})\r\nexport class KeyboardComponent implements OnInit {\r\n\r\n  keyPressed = new Subject();\r\n  shouldKeyboardBeOpen = new Subject();\r\n  specialKeyPressed = new Subject();\r\n  isKeyBoardOpen = false;\r\n  alphaArray = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'a', 's',\r\n    'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm'];\r\n  numArray = new Array('7', '8', '9', '4', '5', '6', '1', '2', '3', '0');\r\n  numArraySorted = new Array('1', '2', '3', '4', '5', '6', '7', '8', '9', '0');\r\n  SpCharArray = ['~', '!', '@', '#', '$', '^', '&', '*', '(', ')', '-', '`',\r\n    '_', '=', '{', '}', '|', ':', '`', '*', '?', '[', ']', '.', '/', ', '];\r\n\r\n  alphaArrayDisp: string[] = [];\r\n  numArrayDisp: string[] = [];;\r\n  SpCharArrayDisp: string[] = [];;\r\n  isShuffleOn: boolean = false;\r\n  isHoverOn: boolean = false;\r\n  isCapsLockOn: boolean = false;\r\n  hoveredOrMouseDown: boolean = false;\r\n  kboardType: string = 'alphaNumeric';\r\n  numericRowsCount = new Array(3);\r\n\r\n  constructor(private cdRef: ChangeDetectorRef,\r\n    private eRef: ElementRef) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.resetCharacterArrays();\r\n    this.isShuffleOn = false;\r\n    this.isHoverOn = false;\r\n    this.isCapsLockOn = false;\r\n    this.hoveredOrMouseDown = false;\r\n  }\r\n\r\n  // Logic To Shuffle A\r\n  shuffleArrayAlgo(arr: string[]) {\r\n    let currentIndex = arr.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = arr[currentIndex];\r\n      arr[currentIndex] = arr[randomIndex];\r\n      arr[randomIndex] = temporaryValue;\r\n    }\r\n  }\r\n\r\n  shuffleDisplayArray() {\r\n    // Shuffle All Arrays\r\n    this.shuffleArrayAlgo(this.alphaArrayDisp);\r\n    this.shuffleArrayAlgo(this.numArrayDisp);\r\n    this.shuffleArrayAlgo(this.SpCharArrayDisp);\r\n  }\r\n\r\n  onCharacterKeyClick(i: string) {\r\n    if (this.isShuffleOn === true) {\r\n      this.shuffleDisplayArray();\r\n    }\r\n    this.keyPressed.next(i);\r\n  }\r\n\r\n  toggleCapsLock() {\r\n    this.isCapsLockOn = !this.isCapsLockOn;\r\n    if (this.isCapsLockOn) {\r\n      this.alphaArrayDisp = this.alphaArrayDisp.map(function (x) {\r\n        return x.toUpperCase();\r\n      });\r\n    } else if (!this.isCapsLockOn) {\r\n      this.alphaArrayDisp = this.alphaArrayDisp.map(function (x) {\r\n        return x.toLowerCase();\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleShuffle() {\r\n    this.isShuffleOn = !this.isShuffleOn;\r\n    if (this.isShuffleOn) {\r\n      this.shuffleDisplayArray();\r\n    } else {\r\n      this.resetCharacterArrays();\r\n    }\r\n    if (this.isCapsLockOn) {\r\n      this.alphaArrayDisp = this.alphaArrayDisp.map(function (x) {\r\n        return x.toUpperCase();\r\n      });\r\n    }\r\n  }\r\n\r\n  resetCharacterArrays() {\r\n    this.alphaArrayDisp = this.alphaArray.slice();\r\n    if (this.kboardType === 'alphaNumeric') {\r\n      this.numArrayDisp = this.numArraySorted.slice();\r\n    } else {\r\n      this.numArrayDisp = this.numArray.slice();\r\n    }\r\n    this.SpCharArrayDisp = this.SpCharArray.slice();\r\n  }\r\n\r\n  backspaceKeyPressed() {\r\n    this.specialKeyPressed.next(SPECIAL_KEYS.backspace);\r\n  }\r\n\r\n  clearButtonPressed() {\r\n    this.specialKeyPressed.next(SPECIAL_KEYS.clear);\r\n  }\r\n\r\n  spacebarKeyPressed() {\r\n    this.keyPressed.next(' ');\r\n  }\r\n\r\n  toggleHover() {\r\n    this.isHoverOn = !this.isHoverOn;\r\n    \r\n  }\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  whereDidUserClick(event: any) {\r\n    this.cdRef.detectChanges();\r\n    if (this.eRef.nativeElement.contains(event.target) || event.target.classList.contains('donotRemove')) {\r\n      this.shouldKeyboardBeOpen.next(false);\r\n    } else {\r\n      if (this.isKeyBoardOpen) {\r\n        this.shouldKeyboardBeOpen.next(true);\r\n      }\r\n      this.isKeyBoardOpen = true;\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"keyboardroot\" [ngClass]=\"{'only-numeric-max-width': kboardType=='numeric'}\">\r\n    <table class=\"keyboard-body set-positioning\" id=\"keyboardrootTable\">\r\n        <tbody *ngIf=\"kboardType !== 'numeric'\">\r\n            <tr>\r\n                <td>\r\n                    <div id=\"keyboard-special-keys\">\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td *ngFor=\"let i of SpCharArrayDisp | slice:0:13\">\r\n                                        <button type=\"button\" class=\"keys donotRemove keys-styles\" (click)=\"onCharacterKeyClick(i)\" (mousedown)=\"hoveredOrMouseDown=true\" (ontouchstart)=\"hoveredOrMouseDown=true\" (mouseup)=\"hoveredOrMouseDown=false\" (mouseleave)=\"hoveredOrMouseDown=false\">{{\r\n                        hoveredOrMouseDown == true ? (isHoverOn? '*' : i) : i }}\r\n                      </button>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        &nbsp;\r\n                                    </td>\r\n                                    <td *ngFor=\"let i of SpCharArrayDisp | slice:13:26\">\r\n                                        <button type=\"button\" class=\"keys donotRemove keys-styles\" (click)=\"onCharacterKeyClick(i)\" (mousedown)=\"hoveredOrMouseDown=true\" (mouseup)=\"hoveredOrMouseDown=false\" (mouseleave)=\"hoveredOrMouseDown=false\">{{\r\n                        hoveredOrMouseDown == true ? (isHoverOn? '*' : i) : i }}\r\n                      </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        &nbsp;\r\n                                    </td>\r\n                                    <td>\r\n                                        &nbsp;\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n            <tr *ngIf=\"kboardType === 'alphaNumeric'\">\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td *ngFor=\"let i of numArrayDisp | slice:0:10\">\r\n                                <button type=\"button\" class=\"keys donotRemove keys-styles\" (click)=\"onCharacterKeyClick(i)\" (mousedown)=\"hoveredOrMouseDown=true\" (mouseup)=\"hoveredOrMouseDown=false\" (mouseleave)=\"hoveredOrMouseDown=false\">{{ hoveredOrMouseDown\r\n                    ==\r\n                    true ? (isHoverOn? '*' : i) : i }}\r\n                  </button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </tr>\r\n            <tr class=\"alpha-numeric-flex\">\r\n                <td class=\"alpha-width\">\r\n                    <div id=\"keyboard-alpha-keys\" align=\"center\">\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td *ngFor=\"let i of alphaArrayDisp | slice:0:10\">\r\n                                        <button type=\"button\" class=\"keys donotRemove keys-styles\" (click)=\"onCharacterKeyClick(i)\" (mousedown)=\"hoveredOrMouseDown=true\" (mouseup)=\"hoveredOrMouseDown=false\" (mouseleave)=\"hoveredOrMouseDown=false\">{{\r\n                        hoveredOrMouseDown == true ? (isHoverOn? '*' : i) : i }}\r\n                      </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <button type=\"button\" class=\"backbutton other-button donotRemove keys-styles\" (click)=\"backspaceKeyPressed()\">{{'Backspace' | translate}}\r\n                      </button>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        &nbsp;\r\n                                    </td>\r\n                                    <td *ngFor=\"let i of alphaArrayDisp | slice:10:19\">\r\n                                        <button type=\"button\" class=\"keys donotRemove keys-styles\" (click)=\"onCharacterKeyClick(i)\" (mousedown)=\"hoveredOrMouseDown=true\" (mouseup)=\"hoveredOrMouseDown=false\" (mouseleave)=\"hoveredOrMouseDown=false\">{{\r\n                        hoveredOrMouseDown == true ? (isHoverOn? '*' : i) : i }}\r\n                      </button>\r\n                                    </td>\r\n                                    <td class=\"button\">\r\n                                        <button type=\"button\" (click)=\"clearButtonPressed()\" class=\"other-button donotRemove keys-styles\">\r\n                                            {{'Clear' | translate}}\r\n                      </button>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        &nbsp;\r\n                                    </td>\r\n                                    <td>\r\n                                        &nbsp;\r\n                                    </td>\r\n                                    <td *ngFor=\"let i of alphaArrayDisp | slice:19:26\">\r\n                                        <button type=\"button\" class=\"keys donotRemove keys-styles\" (click)=\"onCharacterKeyClick(i)\" (mousedown)=\"hoveredOrMouseDown=true\" (mouseup)=\"hoveredOrMouseDown=false\" (mouseleave)=\"hoveredOrMouseDown=false\">{{\r\n                        hoveredOrMouseDown == true ? (isHoverOn? '*' : i) : i }}\r\n                      </button>\r\n                                    </td>\r\n                                    <td class=\"button\">\r\n                                        <button type=\"button\" class=\"capslockbutton other-button donotRemove keys-styles\" (click)=\"toggleCapsLock()\" [class.selected]=\"isCapsLockOn\">{{ isCapsLockOn == true ? 'Caps ON' :\r\n                        'Caps Off' }}\r\n                      </button>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        &nbsp;\r\n                                    </td>\r\n                                    <td>\r\n                                        &nbsp;\r\n                                    </td>\r\n                                    \r\n                                    <td class=\"spacebar-width\">\r\n                                        <button type=\"button\" (click)=\"spacebarKeyPressed()\" class=\"other-button spacebar keys-styles\">Space\r\n                      </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        &nbsp;\r\n                                    </td>\r\n                                    <td>\r\n                                        &nbsp;\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </td>\r\n                <td class=\"numeric-width\" *ngIf=\"kboardType === 'alphaNumericType2'\">\r\n                    <div id=\"keyboard-numeric-keys\">\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td *ngFor=\"let i of numArrayDisp | slice:0:3\">\r\n                                        <button type=\"button\" class=\"keys donotRemove keys-styles\" (click)=\"onCharacterKeyClick(i)\" (mousedown)=\"hoveredOrMouseDown=true\" (mouseup)=\"hoveredOrMouseDown=false\" (mouseleave)=\"hoveredOrMouseDown=false\">{{\r\n                        hoveredOrMouseDown == true ? (isHoverOn? '*' : i) : i }}\r\n                      </button>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td *ngFor=\"let i of numArrayDisp | slice:3:6\">\r\n                                        <button type=\"button\" class=\"keys donotRemove keys-styles\" (click)=\"onCharacterKeyClick(i)\" (mousedown)=\"hoveredOrMouseDown=true\" (mouseup)=\"hoveredOrMouseDown=false\" (mouseleave)=\"hoveredOrMouseDown=false\">{{\r\n                        hoveredOrMouseDown == true ? (isHoverOn? '*' : i) : i }}\r\n                      </button>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td *ngFor=\"let i of numArrayDisp | slice:6:9\">\r\n                                        <button type=\"button\" class=\"keys donotRemove keys-styles\" (click)=\"onCharacterKeyClick(i)\" (mousedown)=\"hoveredOrMouseDown=true\" (mouseup)=\"hoveredOrMouseDown=false\" (mouseleave)=\"hoveredOrMouseDown=false\">{{\r\n                        hoveredOrMouseDown == true ? (isHoverOn? '*' : i) : i }}\r\n                      </button>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <table class=\"number-table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td *ngFor=\"let i of numArrayDisp | slice:9:10\" align=\"center\">\r\n                                        <button type=\"button\" class=\"keys donotRemove keys-styles\" (click)=\"onCharacterKeyClick(i)\" (mousedown)=\"hoveredOrMouseDown=true\" (mouseup)=\"hoveredOrMouseDown=false\" (mouseleave)=\"hoveredOrMouseDown=false\">{{\r\n                        hoveredOrMouseDown == true ? (isHoverOn? '*' : i) : i }}\r\n                      </button>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n\r\n        <tbody *ngIf=\"kboardType === 'numeric'\">\r\n            <td class=\"numeric-width\">\r\n                <div id=\"keyboard-numeric-keys\">\r\n                    <table>\r\n                        <tbody>\r\n                            <tr *ngFor=\"let i of numericRowsCount ;let numerRowNum = index;\">\r\n                                <td *ngFor=\"let i of numArrayDisp | slice:(numerRowNum*3):((numerRowNum+1)*3)\">\r\n                                    <button type=\"button\" class=\"keys donotRemove keys-styles\" (click)=\"onCharacterKeyClick(i)\" (mousedown)=\"hoveredOrMouseDown=true\" (mouseup)=\"hoveredOrMouseDown=false\" (mouseleave)=\"hoveredOrMouseDown=false\">{{\r\n                      hoveredOrMouseDown == true ? (isHoverOn? '*' : i) : i }}\r\n                    </button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <table class=\"table-numeric-row\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td align=\"center\">\r\n                                    <button type=\"button\" class=\"keys donotRemove keys-styles numeric-decimal-bold\" (click)=\"onCharacterKeyClick('.')\" (mousedown)=\"hoveredOrMouseDown=true\" (mouseup)=\"hoveredOrMouseDown=false\" (mouseleave)=\"hoveredOrMouseDown=false\">{{\r\n                      hoveredOrMouseDown == true ? (isHoverOn? '*' : '.') : '.' }}\r\n                    </button>\r\n                                </td>\r\n                                <td *ngFor=\"let i of numArrayDisp | slice:9:10\" align=\"center\">\r\n                                    <button type=\"button\" class=\"keys donotRemove keys-styles\" (click)=\"onCharacterKeyClick(i)\" (mousedown)=\"hoveredOrMouseDown=true\" (mouseup)=\"hoveredOrMouseDown=false\" (mouseleave)=\"hoveredOrMouseDown=false\">{{\r\n                      hoveredOrMouseDown == true ? (isHoverOn? '*' : i) : i }}\r\n                    </button>\r\n                                </td>\r\n                                <td align=\"center\">\r\n                                    <button type=\"button\" class=\"backbutton other-button donotRemove keys-styles\" (click)=\"backspaceKeyPressed()\">{{'Backspace' | translate}}\r\n                    </button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <table class=\"table-numeric-row\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <!-- <td class=\"button\">\r\n                                    <button type=\"button\" class=\"other-button donotRemove keys-styles\" id=\"elemC3\" (click)=\"toggleShuffle()\" [class.selected]=\"isShuffleOn\">\r\n                      {{ isShuffleOn == true ? 'Shuffle On' : 'Shuffle Off' }}\r\n                    </button>\r\n                                </td>\r\n\r\n                                <td class=\"button\">\r\n                                    <button type=\"button\" class=\"hoveringbutton other-button donotRemove keys-styles\" id=\"virtualButton\" (click)=\"toggleHover()\" [class.selected]=\"isHoverOn\">{{ isHoverOn == true ? 'Masking On' : 'Masking Off' }}\r\n                    </button>\r\n                                </td> -->\r\n                                <td class=\"button\">\r\n                                    <button type=\"button\" (click)=\"clearButtonPressed()\" class=\"other-button donotRemove keys-styles\">\r\n                      {{'Clear' | translate}}\r\n                    </button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </td>\r\n        </tbody>\r\n    </table>\r\n</div>","import {\r\n  ComponentFactoryResolver,\r\n  ViewContainerRef,\r\n  Output,\r\n  AfterViewInit,\r\n  Input,\r\n  Directive,\r\n  ComponentRef,\r\n  HostListener,\r\n  EventEmitter,\r\n  ViewChild, ElementRef\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { KeyboardComponent } from './keyboard.component';\r\nimport { SPECIAL_KEYS } from './specialKey';\r\n\r\n\r\n@Directive({\r\n  selector: '[appKeyboard]'\r\n})\r\nexport class KeyboardDirective implements AfterViewInit {\r\n\r\n  @Input() appKeyboard = '';\r\n  @Input() isKeyboardDirectiveActive = false;\r\n  @Output() appKeyboardChange = new EventEmitter();\r\n  @Input() kboardType: string = 'alphaNumeric';\r\n  @ViewChild('childComp', { read: ViewContainerRef }) childComp = null;\r\n  keyPressedSubscription?: Subscription;\r\n  closeKeyboardSubscription?: Subscription;\r\n  specialKeyPressedSubscription?: Subscription;\r\n  private vkbCompRef?: ComponentRef<KeyboardComponent>;\r\n  factory: any;\r\n  \r\n  constructor(private viewContainerRef: ViewContainerRef,\r\n    private resolver: ComponentFactoryResolver,\r\n    private elRef: ElementRef) {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // factory comp resolver\r\n    this.factory = this.resolver.resolveComponentFactory(KeyboardComponent);\r\n  }\r\n\r\n  @HostListener('click') onclick() {\r\n    this.addKB();\r\n  }\r\n\r\n\r\n  // @HostListener('mouseleave') onMouseLeave(Event) {\r\n  //   this.removeKB();\r\n  //   }\r\n\r\n  addKB() {\r\n    if (this.isKeyboardDirectiveActive) {\r\n      this.vkbCompRef = this.viewContainerRef.createComponent(this.factory);\r\n      this.vkbCompRef.instance.kboardType = this.kboardType;\r\n      this.keyPressedSubscription = this.vkbCompRef.instance.keyPressed.subscribe(\r\n        (data) => {\r\n          this.appendPressedKeyValue(data);\r\n          this.elRef.nativeElement.focus();\r\n        },\r\n        (err) => {}\r\n      );\r\n      this.closeKeyboardSubscription = this.vkbCompRef.instance.shouldKeyboardBeOpen.subscribe(\r\n        (data) => {\r\n          if (data) {\r\n            this.removeKB();\r\n          }\r\n        },\r\n        (err) =>  {}\r\n      );\r\n      this.specialKeyPressedSubscription = this.vkbCompRef.instance.specialKeyPressed.subscribe(\r\n        (data) => {\r\n          this.specialKeyPressed(data);\r\n          this.elRef.nativeElement.focus();\r\n        },\r\n        (err) =>  {}\r\n      );\r\n    }\r\n  }\r\n\r\n  removeKB() {\r\n    this.vkbCompRef?.destroy();\r\n    this.viewContainerRef.clear();\r\n    this.keyPressedSubscription?.unsubscribe();\r\n    this.closeKeyboardSubscription?.unsubscribe();\r\n    this.specialKeyPressedSubscription?.unsubscribe();\r\n  }\r\n\r\n  private appendPressedKeyValue(data: any) {\r\n    this.appKeyboard = this.appKeyboard + data;\r\n    this.appKeyboardChange.emit(this.appKeyboard);\r\n  }\r\n\r\n  private specialKeyPressed(data: any) {\r\n    switch (data) {\r\n      case SPECIAL_KEYS.clear:\r\n        this.appKeyboard = '';\r\n        this.appKeyboardChange.emit(this.appKeyboard);\r\n        break;\r\n      case SPECIAL_KEYS.backspace:\r\n        this.appKeyboard = this.appKeyboard.slice(0, -1);\r\n        this.appKeyboardChange.emit(this.appKeyboard);\r\n    }\r\n  }\r\n\r\n}\r\n","import { TranslateModule } from '@ngx-translate/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { KeyboardDirective } from './keyboard.directive';\r\nimport { KeyboardComponent } from './keyboard.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [KeyboardComponent,\r\n    KeyboardDirective],\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule\r\n  ],\r\n  exports: [KeyboardComponent, KeyboardDirective],\r\n  entryComponents: [KeyboardComponent],\r\n})\r\nexport class KeyboardModule { }\r\n","export enum SPECIAL_KEYS {\r\n    clear = 0,\r\n    backspace = 1,\r\n  }"],"names":[],"sourceRoot":"webpack:///"}